#!/usr/bin/env perl

use strict;
use warnings;

use Tie::File;

use YAML::XS;
use MYDan::Node;
use MYDan::Util::MIO::SSH;
use MYDan::Util::OptConf;

$| ++;

@MYDan::Util::OptConf::CONF = qw( pass_through ignore_case );
$MYDan::Util::OptConf::THIS = 'util';

=head1 SYNOPSIS

 $0 -r range [--timeout seconds] [--max number] \
    [--user user] [--sudo sudoer] [--order] [--noop] cmd ..

=cut
my $option = MYDan::Util::OptConf->load();
my %o = $option->get( qw( range=s timeout=i max=i user=s sudo=s order noop ) )
    ->dump();

$option->assert( 'range' );

map { $_ .= '\;' if $_ !~ s/([&|]){2}\s*$/\\$1\\$1/ } @ARGV;

my $range = MYDan::Node->new( $option->dump( 'range' ) );
my %cmd = map { $_ => \@ARGV } $range->load( delete $o{range} )->list();

my %pass;
unless ( $o{noop} )
{
    my $pass = eval{ YAML::XS::LoadFile "$o{conf}/pass" };
    die "load pass fail:$@" if $@;

    while ( my ( $node, $pass ) = each %$pass )
    {
        map{ $pass{$_} = $pass }$range->load( $node )->list();
    }
    $o{lock} = "/tmp/mssh.$$" if $o{order};
}

unless( @ARGV )
{
    print "cmd:";
    my $cmd = <STDIN>;
    die "no get cmd from STDIN" unless $cmd;
    
    tie my @input, 'Tie::File', $o{input} = "/tmp/mssh.".time.".$$";
    @input = ( $cmd );
    
}

my %result = MYDan::Util::MIO::SSH->new( %cmd )->run( %o, pass => \%pass );
my %mesg;

while ( my ( $io, $mesg ) = each %result )
{
    while ( my ( $mesg, $node ) = each %$mesg )
    {
        push @{ $mesg{$io} }, join ': ', $range->load( $node )->dump, $mesg;
    }
}

for my $io ( sort keys %mesg )
{
    print "---\n$io:\n";
    map { print "  $_" } @{ $mesg{$io} };
}

exit 0;
