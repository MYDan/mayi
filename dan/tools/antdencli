#!/usr/bin/env perl
use strict;
use warnings;
use YAML::XS;
use MYDan::AntDen::Cli;
use MYDan::Util::OptConf;

=head1 SYNOPSIS

 $0 [--run abc.sh] [--name jobname ] [--nice 5] [--group foo] [--count 1] [--resources CPU:100,MEM:50] [--image ubuntu] [--datasets abc,foo] [--volume /tmp/abc:/tmp/abcd,/foo:/bar]
 $0 [--list]
 $0 [--ri]         #resource information
 $0 [--info J.20200526.141337.852564.866]
 $0 [--stop J.20200526.141337.852564.866]
 $0 [--tail J.20200526.141337.852564.866 || T.20200526.141337.852564.866.001]
 $0 [--top J.20200526.141337.852564.866 || T.20200526.141337.852564.866.001]
 $0 [--shell J.20200526.141337.852564.866 || T.20200526.141337.852564.866.001]
 $0 [--nvidia-smi J.20200526.141337.852564.866 || T.20200526.141337.852564.866.001]

=cut

my $option = MYDan::Util::OptConf->load();
my %o = $option->set( nice => 5, group => 'foo', count => 1, resources => 'CPU:100,MEM:50', name => 'jobname'  )
    ->get( qw( run=s datasets=s name=s nice=i group=s count=i resources=s list ri info=s stop=s tail=s top=s shell=s nvidia-smi=s image=s volume=s ) )->dump();
 
my $antden = MYDan::AntDen::Cli->new();

if( $o{run} )
{
    my $jobid = $antden->run( %o );
    print "[INFO]Jobid: $jobid\n";
    exec "$0 --tail $jobid";
}
elsif( $o{list} )
{
    my $job = $antden->list( %o );
    my @key = qw( id jobid name nice group status );
    unshift @$job, +{ map{ $_ => $_ }@key };
    map{ my $j = $_; printf "%s\n", join "\t", map{ $j->{$_}} @key } @$job;
}
elsif( $o{ri} )
{
    my $res = $antden->resources( %o );
    printf "Resources:\n  %s\n\n", join ' ', map{ "$_->[0]($_->[1]/$_->[2])" }@{$res->{total}};
    print "Machine\n";
    my @key = qw( ip hostname envhard envsoft switchable group workable role resources mon );
    unshift @{$res->{machine}}, +{ map{ $_ => $_ }@key };
    map{ my $j = $_; printf "  %s\n", join "\t", map{ $j->{$_}} @key } @{$res->{machine}};
}
elsif( $o{info} )
{
    my $info = $antden->info( jobid => $o{info} );
    print YAML::XS::Dump $info;
}
elsif( $o{stop} )
{
    my $jobid = $antden->stop( jobid => $o{stop} );
    print "stop $jobid done.\n";
}
elsif( $o{tail} )
{
    $antden->tail( jobid => $o{tail} );
}
elsif( $o{top} )
{
    $antden->top( jobid => $o{top} );
}
elsif( $o{shell} )
{
    $antden->shell( jobid => $o{shell} );
}
elsif( $o{'nvidia-smi'} )
{
    $antden->nvidiasmi( jobid => $o{'nvidia-smi'} );
}
else
{
    $option->assert();
}

exit 0;

